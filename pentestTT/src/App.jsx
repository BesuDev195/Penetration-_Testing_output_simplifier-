import React, { useState, useMemo } from 'react';
import { Shield, Search as SearchIcon } from 'lucide-react';
import { tools, categories } from './data/tools';
import { ToolCard } from './components/Toolcard';
import { CategoryNav } from './components/CategoryNav';
import { SearchFilter } from './components/Searchfilter';
import { useFavorites } from './hooks/useFavorites';

function App() {
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedTags, setSelectedTags] = useState([]);
  const { favorites, toggleFavorite, isFavorite } = useFavorites();

  // Get all available tags
  const availableTags = useMemo(() => {
    const tagSet = new Set();
    tools.forEach(tool => {
      tool.tags?.forEach(tag => tagSet.add(tag));
    });
    return Array.from(tagSet).sort();
  }, []);

  // Filter tools based on category, search term, and tags
  const filteredTools = useMemo(() => {
    return tools.filter(tool => {
      // Category filter
      if (selectedCategory === 'favorites' && !favorites.includes(tool.id)) {
        return false;
      }
      if (selectedCategory !== 'all' && selectedCategory !== 'favorites' && tool.category !== selectedCategory) {
        return false;
      }

      // Search filter
      if (searchTerm) {
        const searchLower = searchTerm.toLowerCase();
        const matchesSearch = 
          tool.name.toLowerCase().includes(searchLower) ||
          tool.description.toLowerCase().includes(searchLower) ||
          tool.tags?.some(tag => tag.toLowerCase().includes(searchLower)) ||
          tool.category.toLowerCase().includes(searchLower);
        
        if (!matchesSearch) return false;
      }

      // Tag filter
      if (selectedTags.length > 0) {
        const hasMatchingTag = selectedTags.some(tag => 
          tool.tags?.includes(tag)
        );
        if (!hasMatchingTag) return false;
      }

      return true;
    });
  }, [selectedCategory, searchTerm, selectedTags, favorites]);

  // Calculate tool counts for each category
  const toolCounts = useMemo(() => {
    const counts = {};
    
    // Count tools in each category
    categories.forEach(category => {
      counts[category] = tools.filter(tool => tool.category === category).length;
    });
    
    // Count favorites
    counts.favorites = favorites.length;
    
    return counts;
  }, [favorites]);

  const handleTagToggle = (tag) => {
    setSelectedTags(prev => 
      prev.includes(tag)
        ? prev.filter(t => t !== tag)
        : [...prev, tag]
    );
  };

  return (
    <div className="min-h-screen bg-slate-900">
      {/* Header */}
      <header className="bg-slate-800 border-b border-slate-700 shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center space-x-4">
            <div className="p-3 bg-blue-600 rounded-xl">
              <Shield className="h-8 w-8 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-white">Pentest Tools Menu</h1>
              <p className="text-slate-300 mt-1">
                Comprehensive reference for Kali Linux penetration testing tools
              </p>
            </div>
          </div>
        </div>
      </header>

      {/* Category Navigation */}
      <CategoryNav
        categories={categories}
        selectedCategory={selectedCategory}
        onCategorySelect={setSelectedCategory}
        toolCounts={toolCounts}
      />

      {/* Search and Filter */}
      <SearchFilter
        searchTerm={searchTerm}
        onSearchChange={setSearchTerm}
        selectedTags={selectedTags}
        onTagToggle={handleTagToggle}
        availableTags={availableTags}
      />

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Results Summary */}
        <div className="mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h2 className="text-xl font-semibold text-white">
                {selectedCategory === 'all' && 'All Tools'}
                {selectedCategory === 'favorites' && 'Favorite Tools'}
                {selectedCategory !== 'all' && selectedCategory !== 'favorites' && selectedCategory}
              </h2>
              <span className="px-3 py-1 bg-slate-700 text-slate-300 text-sm rounded-full">
                {filteredTools.length} {filteredTools.length === 1 ? 'tool' : 'tools'}
              </span>
            </div>
            
            {(searchTerm || selectedTags.length > 0) && (
              <button
                onClick={() => {
                  setSearchTerm('');
                  setSelectedTags([]);
                }}
                className="text-sm text-blue-400 hover:text-blue-300 underline"
              >
                Clear all filters
              </button>
            )}
          </div>
        </div>

        {/* Tools Grid */}
        {filteredTools.length === 0 ? (
          <div className="text-center py-16">
            <SearchIcon className="h-16 w-16 text-slate-600 mx-auto mb-4" />
            <h3 className="text-xl font-medium text-slate-400 mb-2">No tools found</h3>
            <p className="text-slate-500">
              Try adjusting your search terms or filters to find what you're looking for.
            </p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredTools.map((tool) => (
              <ToolCard
                key={tool.id}
                tool={tool}
                isFavorite={isFavorite(tool.id)}
                onToggleFavorite={toggleFavorite}
              />
            ))}
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-slate-800 border-t border-slate-700 mt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <p className="text-slate-400 text-sm">
              Built for cybersecurity professionals, students, and ethical hackers
            </p>
            <p className="text-slate-500 text-xs mt-2">
              Educational purposes only. Always ensure you have proper authorization before testing.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}

export default App;